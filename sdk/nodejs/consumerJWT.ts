// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Represents a JWT credential for a consumer within a control plane
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@camsechrist/pulumi-konnect";
 * import * as konnect from "@pulumi/konnect";
 *
 * const controlPlane = konnect.getControlPlane({
 *     name: "TestControlPlane",
 * });
 * const consumer = controlPlane.then(controlPlane => konnect.getConsumer({
 *     controlPlaneId: controlPlane.id,
 *     searchUsername: "Bob",
 * }));
 * const example = new konnect.ConsumerJWT("example", {
 *     controlPlaneId: controlPlane.then(controlPlane => controlPlane.id),
 *     consumerId: consumer.then(consumer => consumer.consumerId),
 *     key: "my-key",
 *     secret: "my-secret",
 * });
 * ```
 *
 * ## Import
 *
 * Consumer JWTs can be imported using a proper value of `id` as described above
 */
export class ConsumerJWT extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerJWT resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerJWTState, opts?: pulumi.CustomResourceOptions): ConsumerJWT {
        return new ConsumerJWT(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/consumerJWT:ConsumerJWT';

    /**
     * Returns true if the given object is an instance of ConsumerJWT.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerJWT {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerJWT.__pulumiType;
    }

    /**
     * **(Optional, String)** The algorithm for the JWT.  Allowed values: `HS256`, `HS384`, `HS512`, `RS256`, `RS384`, `RS512`, `ES256`, `ES384`. Default: `HS256`
     */
    public readonly algorithm!: pulumi.Output<string | undefined>;
    /**
     * **(Required, String)** The id of the consumer.
     */
    public readonly consumerId!: pulumi.Output<string>;
    /**
     * **(Required, String)** The id of the control plane.
     */
    public readonly controlPlaneId!: pulumi.Output<string>;
    /**
     * **(String)** Id of the consumer JWT alone
     */
    public /*out*/ readonly jwtId!: pulumi.Output<string>;
    /**
     * **(Optional/Computed, String)** The key value.  If left out, a key will be generated for you.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * **(Optional, String)** The RSA public key in PEM format for the JWT.  Required if `algorithm` is `RS256`, `RS384`, `RS512`, `ES256`, or `ES384`.
     */
    public readonly rsaPublicKey!: pulumi.Output<string | undefined>;
    /**
     * **(Optional/Computed, String)** The secret value.  If left out, a key will be generated for you.
     */
    public readonly secret!: pulumi.Output<string>;

    /**
     * Create a ConsumerJWT resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerJWTArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerJWTArgs | ConsumerJWTState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumerJWTState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["consumerId"] = state ? state.consumerId : undefined;
            resourceInputs["controlPlaneId"] = state ? state.controlPlaneId : undefined;
            resourceInputs["jwtId"] = state ? state.jwtId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["rsaPublicKey"] = state ? state.rsaPublicKey : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
        } else {
            const args = argsOrState as ConsumerJWTArgs | undefined;
            if ((!args || args.consumerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerId'");
            }
            if ((!args || args.controlPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneId'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["consumerId"] = args ? args.consumerId : undefined;
            resourceInputs["controlPlaneId"] = args ? args.controlPlaneId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["rsaPublicKey"] = args ? args.rsaPublicKey : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["jwtId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsumerJWT.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerJWT resources.
 */
export interface ConsumerJWTState {
    /**
     * **(Optional, String)** The algorithm for the JWT.  Allowed values: `HS256`, `HS384`, `HS512`, `RS256`, `RS384`, `RS512`, `ES256`, `ES384`. Default: `HS256`
     */
    algorithm?: pulumi.Input<string>;
    /**
     * **(Required, String)** The id of the consumer.
     */
    consumerId?: pulumi.Input<string>;
    /**
     * **(Required, String)** The id of the control plane.
     */
    controlPlaneId?: pulumi.Input<string>;
    /**
     * **(String)** Id of the consumer JWT alone
     */
    jwtId?: pulumi.Input<string>;
    /**
     * **(Optional/Computed, String)** The key value.  If left out, a key will be generated for you.
     */
    key?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The RSA public key in PEM format for the JWT.  Required if `algorithm` is `RS256`, `RS384`, `RS512`, `ES256`, or `ES384`.
     */
    rsaPublicKey?: pulumi.Input<string>;
    /**
     * **(Optional/Computed, String)** The secret value.  If left out, a key will be generated for you.
     */
    secret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConsumerJWT resource.
 */
export interface ConsumerJWTArgs {
    /**
     * **(Optional, String)** The algorithm for the JWT.  Allowed values: `HS256`, `HS384`, `HS512`, `RS256`, `RS384`, `RS512`, `ES256`, `ES384`. Default: `HS256`
     */
    algorithm?: pulumi.Input<string>;
    /**
     * **(Required, String)** The id of the consumer.
     */
    consumerId: pulumi.Input<string>;
    /**
     * **(Required, String)** The id of the control plane.
     */
    controlPlaneId: pulumi.Input<string>;
    /**
     * **(Optional/Computed, String)** The key value.  If left out, a key will be generated for you.
     */
    key?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The RSA public key in PEM format for the JWT.  Required if `algorithm` is `RS256`, `RS384`, `RS512`, `ES256`, or `ES384`.
     */
    rsaPublicKey?: pulumi.Input<string>;
    /**
     * **(Optional/Computed, String)** The secret value.  If left out, a key will be generated for you.
     */
    secret?: pulumi.Input<string>;
}
