// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Represents all nodes of a control plane
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@pulumi/konnect";
 *
 * const controlPlane = konnect.getControlPlane({
 *     name: "TestControlPlane",
 * });
 * const example = controlPlane.then(controlPlane => konnect.getNodes({
 *     controlPlaneId: controlPlane.id,
 * }));
 * ```
 */
export function getNodes(args: GetNodesArgs, opts?: pulumi.InvokeOptions): Promise<GetNodesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("konnect:index/getNodes:getNodes", {
        "controlPlaneId": args.controlPlaneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodes.
 */
export interface GetNodesArgs {
    /**
     * **(Required, String)** The id of the parent control plane.
     */
    controlPlaneId: string;
}

/**
 * A collection of values returned by getNodes.
 */
export interface GetNodesResult {
    readonly controlPlaneId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * **(set{node})** Set of nodes belonging to control plane
     */
    readonly nodes: outputs.GetNodesNode[];
}
/**
 * Represents all nodes of a control plane
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@pulumi/konnect";
 *
 * const controlPlane = konnect.getControlPlane({
 *     name: "TestControlPlane",
 * });
 * const example = controlPlane.then(controlPlane => konnect.getNodes({
 *     controlPlaneId: controlPlane.id,
 * }));
 * ```
 */
export function getNodesOutput(args: GetNodesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodesResult> {
    return pulumi.output(args).apply((a: any) => getNodes(a, opts))
}

/**
 * A collection of arguments for invoking getNodes.
 */
export interface GetNodesOutputArgs {
    /**
     * **(Required, String)** The id of the parent control plane.
     */
    controlPlaneId: pulumi.Input<string>;
}
