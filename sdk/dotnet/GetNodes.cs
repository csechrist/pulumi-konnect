// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    public static class GetNodes
    {
        /// <summary>
        /// Represents all nodes of a control plane
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Konnect = Pulumi.Konnect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var controlPlane = Konnect.GetControlPlane.Invoke(new()
        ///     {
        ///         Name = "TestControlPlane",
        ///     });
        /// 
        ///     var example = Konnect.GetNodes.Invoke(new()
        ///     {
        ///         ControlPlaneId = controlPlane.Apply(getControlPlaneResult =&gt; getControlPlaneResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNodesResult> InvokeAsync(GetNodesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodesResult>("konnect:index/getNodes:getNodes", args ?? new GetNodesArgs(), options.WithDefaults());

        /// <summary>
        /// Represents all nodes of a control plane
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Konnect = Pulumi.Konnect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var controlPlane = Konnect.GetControlPlane.Invoke(new()
        ///     {
        ///         Name = "TestControlPlane",
        ///     });
        /// 
        ///     var example = Konnect.GetNodes.Invoke(new()
        ///     {
        ///         ControlPlaneId = controlPlane.Apply(getControlPlaneResult =&gt; getControlPlaneResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNodesResult> Invoke(GetNodesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodesResult>("konnect:index/getNodes:getNodes", args ?? new GetNodesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// **(Required, String)** The id of the parent control plane.
        /// </summary>
        [Input("controlPlaneId", required: true)]
        public string ControlPlaneId { get; set; } = null!;

        public GetNodesArgs()
        {
        }
        public static new GetNodesArgs Empty => new GetNodesArgs();
    }

    public sealed class GetNodesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// **(Required, String)** The id of the parent control plane.
        /// </summary>
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        public GetNodesInvokeArgs()
        {
        }
        public static new GetNodesInvokeArgs Empty => new GetNodesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodesResult
    {
        public readonly string ControlPlaneId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// **(set{node})** Set of nodes belonging to control plane
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodesNodeResult> Nodes;

        [OutputConstructor]
        private GetNodesResult(
            string controlPlaneId,

            string id,

            ImmutableArray<Outputs.GetNodesNodeResult> nodes)
        {
            ControlPlaneId = controlPlaneId;
            Id = id;
            Nodes = nodes;
        }
    }
}
