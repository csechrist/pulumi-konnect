// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/csechrist123/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an API key credential for a consumer within a control plane
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/csechrist123/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			controlPlane, err := konnect.LookupControlPlane(ctx, &konnect.LookupControlPlaneArgs{
//				Name: pulumi.StringRef("TestControlPlane"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			consumer, err := konnect.LookupConsumer(ctx, &konnect.LookupConsumerArgs{
//				ControlPlaneId: controlPlane.Id,
//				SearchUsername: pulumi.StringRef("Bob"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = konnect.NewConsumerKey(ctx, "example", &konnect.ConsumerKeyArgs{
//				ControlPlaneId: *pulumi.String(controlPlane.Id),
//				ConsumerId:     *pulumi.String(consumer.ConsumerId),
//				Key:            pulumi.String("my-api-key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Consumer keys can be imported using a proper value of `id` as described above
type ConsumerKey struct {
	pulumi.CustomResourceState

	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringOutput `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// **(Optional/Computed, String)** The API key value.  If left out, a key will be generated for you.
	Key pulumi.StringOutput `pulumi:"key"`
	// **(String)** Id of the consumer API key alone
	KeyId pulumi.StringOutput `pulumi:"keyId"`
}

// NewConsumerKey registers a new resource with the given unique name, arguments, and options.
func NewConsumerKey(ctx *pulumi.Context,
	name string, args *ConsumerKeyArgs, opts ...pulumi.ResourceOption) (*ConsumerKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConsumerKey
	err := ctx.RegisterResource("konnect:index/consumerKey:ConsumerKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerKey gets an existing ConsumerKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerKeyState, opts ...pulumi.ResourceOption) (*ConsumerKey, error) {
	var resource ConsumerKey
	err := ctx.ReadResource("konnect:index/consumerKey:ConsumerKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerKey resources.
type consumerKeyState struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId *string `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// **(Optional/Computed, String)** The API key value.  If left out, a key will be generated for you.
	Key *string `pulumi:"key"`
	// **(String)** Id of the consumer API key alone
	KeyId *string `pulumi:"keyId"`
}

type ConsumerKeyState struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringPtrInput
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringPtrInput
	// **(Optional/Computed, String)** The API key value.  If left out, a key will be generated for you.
	Key pulumi.StringPtrInput
	// **(String)** Id of the consumer API key alone
	KeyId pulumi.StringPtrInput
}

func (ConsumerKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerKeyState)(nil)).Elem()
}

type consumerKeyArgs struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId string `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// **(Optional/Computed, String)** The API key value.  If left out, a key will be generated for you.
	Key *string `pulumi:"key"`
}

// The set of arguments for constructing a ConsumerKey resource.
type ConsumerKeyArgs struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringInput
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringInput
	// **(Optional/Computed, String)** The API key value.  If left out, a key will be generated for you.
	Key pulumi.StringPtrInput
}

func (ConsumerKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerKeyArgs)(nil)).Elem()
}

type ConsumerKeyInput interface {
	pulumi.Input

	ToConsumerKeyOutput() ConsumerKeyOutput
	ToConsumerKeyOutputWithContext(ctx context.Context) ConsumerKeyOutput
}

func (*ConsumerKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerKey)(nil)).Elem()
}

func (i *ConsumerKey) ToConsumerKeyOutput() ConsumerKeyOutput {
	return i.ToConsumerKeyOutputWithContext(context.Background())
}

func (i *ConsumerKey) ToConsumerKeyOutputWithContext(ctx context.Context) ConsumerKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerKeyOutput)
}

// ConsumerKeyArrayInput is an input type that accepts ConsumerKeyArray and ConsumerKeyArrayOutput values.
// You can construct a concrete instance of `ConsumerKeyArrayInput` via:
//
//	ConsumerKeyArray{ ConsumerKeyArgs{...} }
type ConsumerKeyArrayInput interface {
	pulumi.Input

	ToConsumerKeyArrayOutput() ConsumerKeyArrayOutput
	ToConsumerKeyArrayOutputWithContext(context.Context) ConsumerKeyArrayOutput
}

type ConsumerKeyArray []ConsumerKeyInput

func (ConsumerKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerKey)(nil)).Elem()
}

func (i ConsumerKeyArray) ToConsumerKeyArrayOutput() ConsumerKeyArrayOutput {
	return i.ToConsumerKeyArrayOutputWithContext(context.Background())
}

func (i ConsumerKeyArray) ToConsumerKeyArrayOutputWithContext(ctx context.Context) ConsumerKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerKeyArrayOutput)
}

// ConsumerKeyMapInput is an input type that accepts ConsumerKeyMap and ConsumerKeyMapOutput values.
// You can construct a concrete instance of `ConsumerKeyMapInput` via:
//
//	ConsumerKeyMap{ "key": ConsumerKeyArgs{...} }
type ConsumerKeyMapInput interface {
	pulumi.Input

	ToConsumerKeyMapOutput() ConsumerKeyMapOutput
	ToConsumerKeyMapOutputWithContext(context.Context) ConsumerKeyMapOutput
}

type ConsumerKeyMap map[string]ConsumerKeyInput

func (ConsumerKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerKey)(nil)).Elem()
}

func (i ConsumerKeyMap) ToConsumerKeyMapOutput() ConsumerKeyMapOutput {
	return i.ToConsumerKeyMapOutputWithContext(context.Background())
}

func (i ConsumerKeyMap) ToConsumerKeyMapOutputWithContext(ctx context.Context) ConsumerKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerKeyMapOutput)
}

type ConsumerKeyOutput struct{ *pulumi.OutputState }

func (ConsumerKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerKey)(nil)).Elem()
}

func (o ConsumerKeyOutput) ToConsumerKeyOutput() ConsumerKeyOutput {
	return o
}

func (o ConsumerKeyOutput) ToConsumerKeyOutputWithContext(ctx context.Context) ConsumerKeyOutput {
	return o
}

// **(Required, String)** The id of the consumer.
func (o ConsumerKeyOutput) ConsumerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerKey) pulumi.StringOutput { return v.ConsumerId }).(pulumi.StringOutput)
}

// **(Required, String)** The id of the control plane.
func (o ConsumerKeyOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerKey) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// **(Optional/Computed, String)** The API key value.  If left out, a key will be generated for you.
func (o ConsumerKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// **(String)** Id of the consumer API key alone
func (o ConsumerKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerKey) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

type ConsumerKeyArrayOutput struct{ *pulumi.OutputState }

func (ConsumerKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerKey)(nil)).Elem()
}

func (o ConsumerKeyArrayOutput) ToConsumerKeyArrayOutput() ConsumerKeyArrayOutput {
	return o
}

func (o ConsumerKeyArrayOutput) ToConsumerKeyArrayOutputWithContext(ctx context.Context) ConsumerKeyArrayOutput {
	return o
}

func (o ConsumerKeyArrayOutput) Index(i pulumi.IntInput) ConsumerKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumerKey {
		return vs[0].([]*ConsumerKey)[vs[1].(int)]
	}).(ConsumerKeyOutput)
}

type ConsumerKeyMapOutput struct{ *pulumi.OutputState }

func (ConsumerKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerKey)(nil)).Elem()
}

func (o ConsumerKeyMapOutput) ToConsumerKeyMapOutput() ConsumerKeyMapOutput {
	return o
}

func (o ConsumerKeyMapOutput) ToConsumerKeyMapOutputWithContext(ctx context.Context) ConsumerKeyMapOutput {
	return o
}

func (o ConsumerKeyMapOutput) MapIndex(k pulumi.StringInput) ConsumerKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumerKey {
		return vs[0].(map[string]*ConsumerKey)[vs[1].(string)]
	}).(ConsumerKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerKeyInput)(nil)).Elem(), &ConsumerKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerKeyArrayInput)(nil)).Elem(), ConsumerKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerKeyMapInput)(nil)).Elem(), ConsumerKeyMap{})
	pulumi.RegisterOutputType(ConsumerKeyOutput{})
	pulumi.RegisterOutputType(ConsumerKeyArrayOutput{})
	pulumi.RegisterOutputType(ConsumerKeyMapOutput{})
}
