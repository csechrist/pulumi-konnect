// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/csechrist/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a route within a control plane
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/csechrist/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			controlPlane, err := konnect.LookupControlPlane(ctx, &konnect.LookupControlPlaneArgs{
//				Name: pulumi.StringRef("TestControlPlane"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			service, err := konnect.NewService(ctx, "service", &konnect.ServiceArgs{
//				ControlPlaneId: *pulumi.String(controlPlane.Id),
//				Host:           pulumi.String("mockbin.org"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = konnect.NewRoute(ctx, "example", &konnect.RouteArgs{
//				ControlPlaneId: *pulumi.String(controlPlane.Id),
//				ServiceId:      service.ServiceId,
//				Protocols: pulumi.StringArray{
//					pulumi.String("http"),
//				},
//				Paths: pulumi.StringArray{
//					pulumi.String("/example"),
//				},
//				Headers: konnect.RouteHeaderArray{
//					&konnect.RouteHeaderArgs{
//						Name: pulumi.String("required-header"),
//						Values: pulumi.StringArray{
//							pulumi.String("required-header-values"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Routes can be imported using a proper value of `id` as described above
type Route struct {
	pulumi.CustomResourceState

	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
	Headers RouteHeaderArrayOutput `pulumi:"headers"`
	// **(Optional, List of String)** The hosts this route should allow.
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
	HttpsRedirectStatusCode pulumi.IntPtrOutput `pulumi:"httpsRedirectStatusCode"`
	// **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
	Methods pulumi.StringArrayOutput `pulumi:"methods"`
	// **(Optional, String)** The name of the route.
	Name pulumi.StringOutput `pulumi:"name"`
	// **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
	PathHandling pulumi.StringPtrOutput `pulumi:"pathHandling"`
	// **(Optional, List of String)** The paths this route should allow.
	Paths pulumi.StringArrayOutput `pulumi:"paths"`
	// **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
	PreserveHost pulumi.BoolPtrOutput `pulumi:"preserveHost"`
	// **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `https`
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
	RegexPriority pulumi.IntPtrOutput `pulumi:"regexPriority"`
	// **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
	RequestBuffering pulumi.BoolPtrOutput `pulumi:"requestBuffering"`
	// **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
	ResponseBuffering pulumi.BoolPtrOutput `pulumi:"responseBuffering"`
	// **(String)** Id of the route alone
	RouteId pulumi.StringOutput `pulumi:"routeId"`
	// **(Optional, String)** The id of the service to forward traffic to.
	ServiceId pulumi.StringPtrOutput `pulumi:"serviceId"`
	// **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
	StripPath pulumi.BoolPtrOutput `pulumi:"stripPath"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("konnect:index/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("konnect:index/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// **(Required, String)** The id of the control plane.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
	Headers []RouteHeader `pulumi:"headers"`
	// **(Optional, List of String)** The hosts this route should allow.
	Hosts []string `pulumi:"hosts"`
	// **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
	HttpsRedirectStatusCode *int `pulumi:"httpsRedirectStatusCode"`
	// **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
	Methods []string `pulumi:"methods"`
	// **(Optional, String)** The name of the route.
	Name *string `pulumi:"name"`
	// **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
	PathHandling *string `pulumi:"pathHandling"`
	// **(Optional, List of String)** The paths this route should allow.
	Paths []string `pulumi:"paths"`
	// **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
	PreserveHost *bool `pulumi:"preserveHost"`
	// **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `https`
	Protocols []string `pulumi:"protocols"`
	// **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
	RegexPriority *int `pulumi:"regexPriority"`
	// **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
	RequestBuffering *bool `pulumi:"requestBuffering"`
	// **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
	ResponseBuffering *bool `pulumi:"responseBuffering"`
	// **(String)** Id of the route alone
	RouteId *string `pulumi:"routeId"`
	// **(Optional, String)** The id of the service to forward traffic to.
	ServiceId *string `pulumi:"serviceId"`
	// **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
	StripPath *bool `pulumi:"stripPath"`
}

type RouteState struct {
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringPtrInput
	// **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
	Headers RouteHeaderArrayInput
	// **(Optional, List of String)** The hosts this route should allow.
	Hosts pulumi.StringArrayInput
	// **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
	HttpsRedirectStatusCode pulumi.IntPtrInput
	// **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
	Methods pulumi.StringArrayInput
	// **(Optional, String)** The name of the route.
	Name pulumi.StringPtrInput
	// **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
	PathHandling pulumi.StringPtrInput
	// **(Optional, List of String)** The paths this route should allow.
	Paths pulumi.StringArrayInput
	// **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
	PreserveHost pulumi.BoolPtrInput
	// **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `https`
	Protocols pulumi.StringArrayInput
	// **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
	RegexPriority pulumi.IntPtrInput
	// **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
	RequestBuffering pulumi.BoolPtrInput
	// **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
	ResponseBuffering pulumi.BoolPtrInput
	// **(String)** Id of the route alone
	RouteId pulumi.StringPtrInput
	// **(Optional, String)** The id of the service to forward traffic to.
	ServiceId pulumi.StringPtrInput
	// **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
	StripPath pulumi.BoolPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// **(Required, String)** The id of the control plane.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
	Headers []RouteHeader `pulumi:"headers"`
	// **(Optional, List of String)** The hosts this route should allow.
	Hosts []string `pulumi:"hosts"`
	// **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
	HttpsRedirectStatusCode *int `pulumi:"httpsRedirectStatusCode"`
	// **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
	Methods []string `pulumi:"methods"`
	// **(Optional, String)** The name of the route.
	Name *string `pulumi:"name"`
	// **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
	PathHandling *string `pulumi:"pathHandling"`
	// **(Optional, List of String)** The paths this route should allow.
	Paths []string `pulumi:"paths"`
	// **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
	PreserveHost *bool `pulumi:"preserveHost"`
	// **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `https`
	Protocols []string `pulumi:"protocols"`
	// **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
	RegexPriority *int `pulumi:"regexPriority"`
	// **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
	RequestBuffering *bool `pulumi:"requestBuffering"`
	// **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
	ResponseBuffering *bool `pulumi:"responseBuffering"`
	// **(Optional, String)** The id of the service to forward traffic to.
	ServiceId *string `pulumi:"serviceId"`
	// **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
	StripPath *bool `pulumi:"stripPath"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringInput
	// **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
	Headers RouteHeaderArrayInput
	// **(Optional, List of String)** The hosts this route should allow.
	Hosts pulumi.StringArrayInput
	// **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
	HttpsRedirectStatusCode pulumi.IntPtrInput
	// **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
	Methods pulumi.StringArrayInput
	// **(Optional, String)** The name of the route.
	Name pulumi.StringPtrInput
	// **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
	PathHandling pulumi.StringPtrInput
	// **(Optional, List of String)** The paths this route should allow.
	Paths pulumi.StringArrayInput
	// **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
	PreserveHost pulumi.BoolPtrInput
	// **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `https`
	Protocols pulumi.StringArrayInput
	// **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
	RegexPriority pulumi.IntPtrInput
	// **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
	RequestBuffering pulumi.BoolPtrInput
	// **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
	ResponseBuffering pulumi.BoolPtrInput
	// **(Optional, String)** The id of the service to forward traffic to.
	ServiceId pulumi.StringPtrInput
	// **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
	StripPath pulumi.BoolPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

// **(Required, String)** The id of the control plane.
func (o RouteOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
func (o RouteOutput) Headers() RouteHeaderArrayOutput {
	return o.ApplyT(func(v *Route) RouteHeaderArrayOutput { return v.Headers }).(RouteHeaderArrayOutput)
}

// **(Optional, List of String)** The hosts this route should allow.
func (o RouteOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
func (o RouteOutput) HttpsRedirectStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.IntPtrOutput { return v.HttpsRedirectStatusCode }).(pulumi.IntPtrOutput)
}

// **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
func (o RouteOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route) pulumi.StringArrayOutput { return v.Methods }).(pulumi.StringArrayOutput)
}

// **(Optional, String)** The name of the route.
func (o RouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
func (o RouteOutput) PathHandling() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.PathHandling }).(pulumi.StringPtrOutput)
}

// **(Optional, List of String)** The paths this route should allow.
func (o RouteOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route) pulumi.StringArrayOutput { return v.Paths }).(pulumi.StringArrayOutput)
}

// **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
func (o RouteOutput) PreserveHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolPtrOutput { return v.PreserveHost }).(pulumi.BoolPtrOutput)
}

// **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `https`
func (o RouteOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
func (o RouteOutput) RegexPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.IntPtrOutput { return v.RegexPriority }).(pulumi.IntPtrOutput)
}

// **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
func (o RouteOutput) RequestBuffering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolPtrOutput { return v.RequestBuffering }).(pulumi.BoolPtrOutput)
}

// **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
func (o RouteOutput) ResponseBuffering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolPtrOutput { return v.ResponseBuffering }).(pulumi.BoolPtrOutput)
}

// **(String)** Id of the route alone
func (o RouteOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

// **(Optional, String)** The id of the service to forward traffic to.
func (o RouteOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.ServiceId }).(pulumi.StringPtrOutput)
}

// **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
func (o RouteOutput) StripPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolPtrOutput { return v.StripPath }).(pulumi.BoolPtrOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}
