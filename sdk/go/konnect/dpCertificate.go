// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/csechrist/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DpCertificate struct {
	pulumi.CustomResourceState

	Cert           pulumi.StringOutput `pulumi:"cert"`
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
}

// NewDpCertificate registers a new resource with the given unique name, arguments, and options.
func NewDpCertificate(ctx *pulumi.Context,
	name string, args *DpCertificateArgs, opts ...pulumi.ResourceOption) (*DpCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cert == nil {
		return nil, errors.New("invalid value for required argument 'Cert'")
	}
	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DpCertificate
	err := ctx.RegisterResource("konnect:index/dpCertificate:DpCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDpCertificate gets an existing DpCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDpCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DpCertificateState, opts ...pulumi.ResourceOption) (*DpCertificate, error) {
	var resource DpCertificate
	err := ctx.ReadResource("konnect:index/dpCertificate:DpCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DpCertificate resources.
type dpCertificateState struct {
	Cert           *string `pulumi:"cert"`
	ControlPlaneId *string `pulumi:"controlPlaneId"`
}

type DpCertificateState struct {
	Cert           pulumi.StringPtrInput
	ControlPlaneId pulumi.StringPtrInput
}

func (DpCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*dpCertificateState)(nil)).Elem()
}

type dpCertificateArgs struct {
	Cert           string `pulumi:"cert"`
	ControlPlaneId string `pulumi:"controlPlaneId"`
}

// The set of arguments for constructing a DpCertificate resource.
type DpCertificateArgs struct {
	Cert           pulumi.StringInput
	ControlPlaneId pulumi.StringInput
}

func (DpCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dpCertificateArgs)(nil)).Elem()
}

type DpCertificateInput interface {
	pulumi.Input

	ToDpCertificateOutput() DpCertificateOutput
	ToDpCertificateOutputWithContext(ctx context.Context) DpCertificateOutput
}

func (*DpCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**DpCertificate)(nil)).Elem()
}

func (i *DpCertificate) ToDpCertificateOutput() DpCertificateOutput {
	return i.ToDpCertificateOutputWithContext(context.Background())
}

func (i *DpCertificate) ToDpCertificateOutputWithContext(ctx context.Context) DpCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DpCertificateOutput)
}

// DpCertificateArrayInput is an input type that accepts DpCertificateArray and DpCertificateArrayOutput values.
// You can construct a concrete instance of `DpCertificateArrayInput` via:
//
//	DpCertificateArray{ DpCertificateArgs{...} }
type DpCertificateArrayInput interface {
	pulumi.Input

	ToDpCertificateArrayOutput() DpCertificateArrayOutput
	ToDpCertificateArrayOutputWithContext(context.Context) DpCertificateArrayOutput
}

type DpCertificateArray []DpCertificateInput

func (DpCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DpCertificate)(nil)).Elem()
}

func (i DpCertificateArray) ToDpCertificateArrayOutput() DpCertificateArrayOutput {
	return i.ToDpCertificateArrayOutputWithContext(context.Background())
}

func (i DpCertificateArray) ToDpCertificateArrayOutputWithContext(ctx context.Context) DpCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DpCertificateArrayOutput)
}

// DpCertificateMapInput is an input type that accepts DpCertificateMap and DpCertificateMapOutput values.
// You can construct a concrete instance of `DpCertificateMapInput` via:
//
//	DpCertificateMap{ "key": DpCertificateArgs{...} }
type DpCertificateMapInput interface {
	pulumi.Input

	ToDpCertificateMapOutput() DpCertificateMapOutput
	ToDpCertificateMapOutputWithContext(context.Context) DpCertificateMapOutput
}

type DpCertificateMap map[string]DpCertificateInput

func (DpCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DpCertificate)(nil)).Elem()
}

func (i DpCertificateMap) ToDpCertificateMapOutput() DpCertificateMapOutput {
	return i.ToDpCertificateMapOutputWithContext(context.Background())
}

func (i DpCertificateMap) ToDpCertificateMapOutputWithContext(ctx context.Context) DpCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DpCertificateMapOutput)
}

type DpCertificateOutput struct{ *pulumi.OutputState }

func (DpCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DpCertificate)(nil)).Elem()
}

func (o DpCertificateOutput) ToDpCertificateOutput() DpCertificateOutput {
	return o
}

func (o DpCertificateOutput) ToDpCertificateOutputWithContext(ctx context.Context) DpCertificateOutput {
	return o
}

func (o DpCertificateOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *DpCertificate) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

func (o DpCertificateOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DpCertificate) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

type DpCertificateArrayOutput struct{ *pulumi.OutputState }

func (DpCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DpCertificate)(nil)).Elem()
}

func (o DpCertificateArrayOutput) ToDpCertificateArrayOutput() DpCertificateArrayOutput {
	return o
}

func (o DpCertificateArrayOutput) ToDpCertificateArrayOutputWithContext(ctx context.Context) DpCertificateArrayOutput {
	return o
}

func (o DpCertificateArrayOutput) Index(i pulumi.IntInput) DpCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DpCertificate {
		return vs[0].([]*DpCertificate)[vs[1].(int)]
	}).(DpCertificateOutput)
}

type DpCertificateMapOutput struct{ *pulumi.OutputState }

func (DpCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DpCertificate)(nil)).Elem()
}

func (o DpCertificateMapOutput) ToDpCertificateMapOutput() DpCertificateMapOutput {
	return o
}

func (o DpCertificateMapOutput) ToDpCertificateMapOutputWithContext(ctx context.Context) DpCertificateMapOutput {
	return o
}

func (o DpCertificateMapOutput) MapIndex(k pulumi.StringInput) DpCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DpCertificate {
		return vs[0].(map[string]*DpCertificate)[vs[1].(string)]
	}).(DpCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DpCertificateInput)(nil)).Elem(), &DpCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*DpCertificateArrayInput)(nil)).Elem(), DpCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DpCertificateMapInput)(nil)).Elem(), DpCertificateMap{})
	pulumi.RegisterOutputType(DpCertificateOutput{})
	pulumi.RegisterOutputType(DpCertificateArrayOutput{})
	pulumi.RegisterOutputType(DpCertificateMapOutput{})
}
