// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/csechrist123/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a basic auth credential for a consumer within a control plane
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/csechrist123/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			controlPlane, err := konnect.LookupControlPlane(ctx, &konnect.LookupControlPlaneArgs{
//				Name: pulumi.StringRef("TestControlPlane"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			consumer, err := konnect.LookupConsumer(ctx, &konnect.LookupConsumerArgs{
//				ControlPlaneId: controlPlane.Id,
//				SearchUsername: pulumi.StringRef("Bob"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = konnect.NewConsumerBasic(ctx, "example", &konnect.ConsumerBasicArgs{
//				ControlPlaneId: *pulumi.String(controlPlane.Id),
//				ConsumerId:     *pulumi.String(consumer.ConsumerId),
//				Username:       pulumi.String("my-username"),
//				Password:       pulumi.String("my-password"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Consumer basics can be imported using a proper value of `id` as described above
type ConsumerBasic struct {
	pulumi.CustomResourceState

	// **(String)** Id of the consumer basic auth alone
	BasicId pulumi.StringOutput `pulumi:"basicId"`
	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringOutput `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// **(Required, String)** The password value.
	Password pulumi.StringOutput `pulumi:"password"`
	// **(String)** Hash of the password
	PasswordHash pulumi.StringOutput `pulumi:"passwordHash"`
	// **(Required, String)** The username value.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewConsumerBasic registers a new resource with the given unique name, arguments, and options.
func NewConsumerBasic(ctx *pulumi.Context,
	name string, args *ConsumerBasicArgs, opts ...pulumi.ResourceOption) (*ConsumerBasic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConsumerBasic
	err := ctx.RegisterResource("konnect:index/consumerBasic:ConsumerBasic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerBasic gets an existing ConsumerBasic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerBasic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerBasicState, opts ...pulumi.ResourceOption) (*ConsumerBasic, error) {
	var resource ConsumerBasic
	err := ctx.ReadResource("konnect:index/consumerBasic:ConsumerBasic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerBasic resources.
type consumerBasicState struct {
	// **(String)** Id of the consumer basic auth alone
	BasicId *string `pulumi:"basicId"`
	// **(Required, String)** The id of the consumer.
	ConsumerId *string `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// **(Required, String)** The password value.
	Password *string `pulumi:"password"`
	// **(String)** Hash of the password
	PasswordHash *string `pulumi:"passwordHash"`
	// **(Required, String)** The username value.
	Username *string `pulumi:"username"`
}

type ConsumerBasicState struct {
	// **(String)** Id of the consumer basic auth alone
	BasicId pulumi.StringPtrInput
	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringPtrInput
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringPtrInput
	// **(Required, String)** The password value.
	Password pulumi.StringPtrInput
	// **(String)** Hash of the password
	PasswordHash pulumi.StringPtrInput
	// **(Required, String)** The username value.
	Username pulumi.StringPtrInput
}

func (ConsumerBasicState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerBasicState)(nil)).Elem()
}

type consumerBasicArgs struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId string `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// **(Required, String)** The password value.
	Password string `pulumi:"password"`
	// **(Required, String)** The username value.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ConsumerBasic resource.
type ConsumerBasicArgs struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringInput
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringInput
	// **(Required, String)** The password value.
	Password pulumi.StringInput
	// **(Required, String)** The username value.
	Username pulumi.StringInput
}

func (ConsumerBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerBasicArgs)(nil)).Elem()
}

type ConsumerBasicInput interface {
	pulumi.Input

	ToConsumerBasicOutput() ConsumerBasicOutput
	ToConsumerBasicOutputWithContext(ctx context.Context) ConsumerBasicOutput
}

func (*ConsumerBasic) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerBasic)(nil)).Elem()
}

func (i *ConsumerBasic) ToConsumerBasicOutput() ConsumerBasicOutput {
	return i.ToConsumerBasicOutputWithContext(context.Background())
}

func (i *ConsumerBasic) ToConsumerBasicOutputWithContext(ctx context.Context) ConsumerBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerBasicOutput)
}

// ConsumerBasicArrayInput is an input type that accepts ConsumerBasicArray and ConsumerBasicArrayOutput values.
// You can construct a concrete instance of `ConsumerBasicArrayInput` via:
//
//	ConsumerBasicArray{ ConsumerBasicArgs{...} }
type ConsumerBasicArrayInput interface {
	pulumi.Input

	ToConsumerBasicArrayOutput() ConsumerBasicArrayOutput
	ToConsumerBasicArrayOutputWithContext(context.Context) ConsumerBasicArrayOutput
}

type ConsumerBasicArray []ConsumerBasicInput

func (ConsumerBasicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerBasic)(nil)).Elem()
}

func (i ConsumerBasicArray) ToConsumerBasicArrayOutput() ConsumerBasicArrayOutput {
	return i.ToConsumerBasicArrayOutputWithContext(context.Background())
}

func (i ConsumerBasicArray) ToConsumerBasicArrayOutputWithContext(ctx context.Context) ConsumerBasicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerBasicArrayOutput)
}

// ConsumerBasicMapInput is an input type that accepts ConsumerBasicMap and ConsumerBasicMapOutput values.
// You can construct a concrete instance of `ConsumerBasicMapInput` via:
//
//	ConsumerBasicMap{ "key": ConsumerBasicArgs{...} }
type ConsumerBasicMapInput interface {
	pulumi.Input

	ToConsumerBasicMapOutput() ConsumerBasicMapOutput
	ToConsumerBasicMapOutputWithContext(context.Context) ConsumerBasicMapOutput
}

type ConsumerBasicMap map[string]ConsumerBasicInput

func (ConsumerBasicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerBasic)(nil)).Elem()
}

func (i ConsumerBasicMap) ToConsumerBasicMapOutput() ConsumerBasicMapOutput {
	return i.ToConsumerBasicMapOutputWithContext(context.Background())
}

func (i ConsumerBasicMap) ToConsumerBasicMapOutputWithContext(ctx context.Context) ConsumerBasicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerBasicMapOutput)
}

type ConsumerBasicOutput struct{ *pulumi.OutputState }

func (ConsumerBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerBasic)(nil)).Elem()
}

func (o ConsumerBasicOutput) ToConsumerBasicOutput() ConsumerBasicOutput {
	return o
}

func (o ConsumerBasicOutput) ToConsumerBasicOutputWithContext(ctx context.Context) ConsumerBasicOutput {
	return o
}

// **(String)** Id of the consumer basic auth alone
func (o ConsumerBasicOutput) BasicId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerBasic) pulumi.StringOutput { return v.BasicId }).(pulumi.StringOutput)
}

// **(Required, String)** The id of the consumer.
func (o ConsumerBasicOutput) ConsumerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerBasic) pulumi.StringOutput { return v.ConsumerId }).(pulumi.StringOutput)
}

// **(Required, String)** The id of the control plane.
func (o ConsumerBasicOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerBasic) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// **(Required, String)** The password value.
func (o ConsumerBasicOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerBasic) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// **(String)** Hash of the password
func (o ConsumerBasicOutput) PasswordHash() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerBasic) pulumi.StringOutput { return v.PasswordHash }).(pulumi.StringOutput)
}

// **(Required, String)** The username value.
func (o ConsumerBasicOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerBasic) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ConsumerBasicArrayOutput struct{ *pulumi.OutputState }

func (ConsumerBasicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerBasic)(nil)).Elem()
}

func (o ConsumerBasicArrayOutput) ToConsumerBasicArrayOutput() ConsumerBasicArrayOutput {
	return o
}

func (o ConsumerBasicArrayOutput) ToConsumerBasicArrayOutputWithContext(ctx context.Context) ConsumerBasicArrayOutput {
	return o
}

func (o ConsumerBasicArrayOutput) Index(i pulumi.IntInput) ConsumerBasicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumerBasic {
		return vs[0].([]*ConsumerBasic)[vs[1].(int)]
	}).(ConsumerBasicOutput)
}

type ConsumerBasicMapOutput struct{ *pulumi.OutputState }

func (ConsumerBasicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerBasic)(nil)).Elem()
}

func (o ConsumerBasicMapOutput) ToConsumerBasicMapOutput() ConsumerBasicMapOutput {
	return o
}

func (o ConsumerBasicMapOutput) ToConsumerBasicMapOutputWithContext(ctx context.Context) ConsumerBasicMapOutput {
	return o
}

func (o ConsumerBasicMapOutput) MapIndex(k pulumi.StringInput) ConsumerBasicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumerBasic {
		return vs[0].(map[string]*ConsumerBasic)[vs[1].(string)]
	}).(ConsumerBasicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerBasicInput)(nil)).Elem(), &ConsumerBasic{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerBasicArrayInput)(nil)).Elem(), ConsumerBasicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerBasicMapInput)(nil)).Elem(), ConsumerBasicMap{})
	pulumi.RegisterOutputType(ConsumerBasicOutput{})
	pulumi.RegisterOutputType(ConsumerBasicArrayOutput{})
	pulumi.RegisterOutputType(ConsumerBasicMapOutput{})
}
