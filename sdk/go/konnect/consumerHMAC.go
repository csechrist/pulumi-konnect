// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/csechrist123/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an HMAC credential for a consumer within a control plane
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/csechrist123/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			controlPlane, err := konnect.LookupControlPlane(ctx, &konnect.LookupControlPlaneArgs{
//				Name: pulumi.StringRef("TestControlPlane"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			consumer, err := konnect.LookupConsumer(ctx, &konnect.LookupConsumerArgs{
//				ControlPlaneId: controlPlane.Id,
//				SearchUsername: pulumi.StringRef("Bob"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = konnect.NewConsumerHMAC(ctx, "example", &konnect.ConsumerHMACArgs{
//				ControlPlaneId: *pulumi.String(controlPlane.Id),
//				ConsumerId:     *pulumi.String(consumer.ConsumerId),
//				Username:       pulumi.String("my-username"),
//				Secret:         pulumi.String("my-secret"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Consumer HMACs can be imported using a proper value of `id` as described above
type ConsumerHMAC struct {
	pulumi.CustomResourceState

	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringOutput `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// **(String)** Id of the consumer HMAC alone
	HmacId pulumi.StringOutput `pulumi:"hmacId"`
	// **(Optional/Computed, String)** The secret value.  If left out, a secret will be generated for you.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// **(Required, String)** The username value.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewConsumerHMAC registers a new resource with the given unique name, arguments, and options.
func NewConsumerHMAC(ctx *pulumi.Context,
	name string, args *ConsumerHMACArgs, opts ...pulumi.ResourceOption) (*ConsumerHMAC, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConsumerHMAC
	err := ctx.RegisterResource("konnect:index/consumerHMAC:ConsumerHMAC", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerHMAC gets an existing ConsumerHMAC resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerHMAC(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerHMACState, opts ...pulumi.ResourceOption) (*ConsumerHMAC, error) {
	var resource ConsumerHMAC
	err := ctx.ReadResource("konnect:index/consumerHMAC:ConsumerHMAC", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerHMAC resources.
type consumerHMACState struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId *string `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// **(String)** Id of the consumer HMAC alone
	HmacId *string `pulumi:"hmacId"`
	// **(Optional/Computed, String)** The secret value.  If left out, a secret will be generated for you.
	Secret *string `pulumi:"secret"`
	// **(Required, String)** The username value.
	Username *string `pulumi:"username"`
}

type ConsumerHMACState struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringPtrInput
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringPtrInput
	// **(String)** Id of the consumer HMAC alone
	HmacId pulumi.StringPtrInput
	// **(Optional/Computed, String)** The secret value.  If left out, a secret will be generated for you.
	Secret pulumi.StringPtrInput
	// **(Required, String)** The username value.
	Username pulumi.StringPtrInput
}

func (ConsumerHMACState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerHMACState)(nil)).Elem()
}

type consumerHMACArgs struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId string `pulumi:"consumerId"`
	// **(Required, String)** The id of the control plane.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// **(Optional/Computed, String)** The secret value.  If left out, a secret will be generated for you.
	Secret *string `pulumi:"secret"`
	// **(Required, String)** The username value.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ConsumerHMAC resource.
type ConsumerHMACArgs struct {
	// **(Required, String)** The id of the consumer.
	ConsumerId pulumi.StringInput
	// **(Required, String)** The id of the control plane.
	ControlPlaneId pulumi.StringInput
	// **(Optional/Computed, String)** The secret value.  If left out, a secret will be generated for you.
	Secret pulumi.StringPtrInput
	// **(Required, String)** The username value.
	Username pulumi.StringInput
}

func (ConsumerHMACArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerHMACArgs)(nil)).Elem()
}

type ConsumerHMACInput interface {
	pulumi.Input

	ToConsumerHMACOutput() ConsumerHMACOutput
	ToConsumerHMACOutputWithContext(ctx context.Context) ConsumerHMACOutput
}

func (*ConsumerHMAC) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerHMAC)(nil)).Elem()
}

func (i *ConsumerHMAC) ToConsumerHMACOutput() ConsumerHMACOutput {
	return i.ToConsumerHMACOutputWithContext(context.Background())
}

func (i *ConsumerHMAC) ToConsumerHMACOutputWithContext(ctx context.Context) ConsumerHMACOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerHMACOutput)
}

// ConsumerHMACArrayInput is an input type that accepts ConsumerHMACArray and ConsumerHMACArrayOutput values.
// You can construct a concrete instance of `ConsumerHMACArrayInput` via:
//
//	ConsumerHMACArray{ ConsumerHMACArgs{...} }
type ConsumerHMACArrayInput interface {
	pulumi.Input

	ToConsumerHMACArrayOutput() ConsumerHMACArrayOutput
	ToConsumerHMACArrayOutputWithContext(context.Context) ConsumerHMACArrayOutput
}

type ConsumerHMACArray []ConsumerHMACInput

func (ConsumerHMACArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerHMAC)(nil)).Elem()
}

func (i ConsumerHMACArray) ToConsumerHMACArrayOutput() ConsumerHMACArrayOutput {
	return i.ToConsumerHMACArrayOutputWithContext(context.Background())
}

func (i ConsumerHMACArray) ToConsumerHMACArrayOutputWithContext(ctx context.Context) ConsumerHMACArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerHMACArrayOutput)
}

// ConsumerHMACMapInput is an input type that accepts ConsumerHMACMap and ConsumerHMACMapOutput values.
// You can construct a concrete instance of `ConsumerHMACMapInput` via:
//
//	ConsumerHMACMap{ "key": ConsumerHMACArgs{...} }
type ConsumerHMACMapInput interface {
	pulumi.Input

	ToConsumerHMACMapOutput() ConsumerHMACMapOutput
	ToConsumerHMACMapOutputWithContext(context.Context) ConsumerHMACMapOutput
}

type ConsumerHMACMap map[string]ConsumerHMACInput

func (ConsumerHMACMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerHMAC)(nil)).Elem()
}

func (i ConsumerHMACMap) ToConsumerHMACMapOutput() ConsumerHMACMapOutput {
	return i.ToConsumerHMACMapOutputWithContext(context.Background())
}

func (i ConsumerHMACMap) ToConsumerHMACMapOutputWithContext(ctx context.Context) ConsumerHMACMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerHMACMapOutput)
}

type ConsumerHMACOutput struct{ *pulumi.OutputState }

func (ConsumerHMACOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerHMAC)(nil)).Elem()
}

func (o ConsumerHMACOutput) ToConsumerHMACOutput() ConsumerHMACOutput {
	return o
}

func (o ConsumerHMACOutput) ToConsumerHMACOutputWithContext(ctx context.Context) ConsumerHMACOutput {
	return o
}

// **(Required, String)** The id of the consumer.
func (o ConsumerHMACOutput) ConsumerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerHMAC) pulumi.StringOutput { return v.ConsumerId }).(pulumi.StringOutput)
}

// **(Required, String)** The id of the control plane.
func (o ConsumerHMACOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerHMAC) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// **(String)** Id of the consumer HMAC alone
func (o ConsumerHMACOutput) HmacId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerHMAC) pulumi.StringOutput { return v.HmacId }).(pulumi.StringOutput)
}

// **(Optional/Computed, String)** The secret value.  If left out, a secret will be generated for you.
func (o ConsumerHMACOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerHMAC) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// **(Required, String)** The username value.
func (o ConsumerHMACOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerHMAC) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ConsumerHMACArrayOutput struct{ *pulumi.OutputState }

func (ConsumerHMACArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerHMAC)(nil)).Elem()
}

func (o ConsumerHMACArrayOutput) ToConsumerHMACArrayOutput() ConsumerHMACArrayOutput {
	return o
}

func (o ConsumerHMACArrayOutput) ToConsumerHMACArrayOutputWithContext(ctx context.Context) ConsumerHMACArrayOutput {
	return o
}

func (o ConsumerHMACArrayOutput) Index(i pulumi.IntInput) ConsumerHMACOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumerHMAC {
		return vs[0].([]*ConsumerHMAC)[vs[1].(int)]
	}).(ConsumerHMACOutput)
}

type ConsumerHMACMapOutput struct{ *pulumi.OutputState }

func (ConsumerHMACMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerHMAC)(nil)).Elem()
}

func (o ConsumerHMACMapOutput) ToConsumerHMACMapOutput() ConsumerHMACMapOutput {
	return o
}

func (o ConsumerHMACMapOutput) ToConsumerHMACMapOutputWithContext(ctx context.Context) ConsumerHMACMapOutput {
	return o
}

func (o ConsumerHMACMapOutput) MapIndex(k pulumi.StringInput) ConsumerHMACOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumerHMAC {
		return vs[0].(map[string]*ConsumerHMAC)[vs[1].(string)]
	}).(ConsumerHMACOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerHMACInput)(nil)).Elem(), &ConsumerHMAC{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerHMACArrayInput)(nil)).Elem(), ConsumerHMACArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerHMACMapInput)(nil)).Elem(), ConsumerHMACMap{})
	pulumi.RegisterOutputType(ConsumerHMACOutput{})
	pulumi.RegisterOutputType(ConsumerHMACArrayOutput{})
	pulumi.RegisterOutputType(ConsumerHMACMapOutput{})
}
