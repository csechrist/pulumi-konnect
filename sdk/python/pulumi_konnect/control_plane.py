# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ControlPlaneArgs', 'ControlPlane']

@pulumi.input_type
class ControlPlaneArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ControlPlane resource.
        :param pulumi.Input[str] description: **(Optional, String)** The description of the control plane.
        :param pulumi.Input[str] name: **(Required, String)** The name of the control plane.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The description of the control plane.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The name of the control plane.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ControlPlaneState:
    def __init__(__self__, *,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 control_plane_endpoint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 telemetry_endpoint: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ControlPlane resources.
        :param pulumi.Input[str] cluster_type: **(String)** The cluster type of the control plane.
        :param pulumi.Input[str] control_plane_endpoint: **(String)** The control plane endpoint URL of the control plane.
        :param pulumi.Input[str] description: **(Optional, String)** The description of the control plane.
        :param pulumi.Input[str] name: **(Required, String)** The name of the control plane.
        :param pulumi.Input[str] telemetry_endpoint: **(String)** The telemetry endpoint URL of the control plane.
        """
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if control_plane_endpoint is not None:
            pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if telemetry_endpoint is not None:
            pulumi.set(__self__, "telemetry_endpoint", telemetry_endpoint)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        **(String)** The cluster type of the control plane.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        **(String)** The control plane endpoint URL of the control plane.
        """
        return pulumi.get(self, "control_plane_endpoint")

    @control_plane_endpoint.setter
    def control_plane_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_endpoint", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The description of the control plane.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The name of the control plane.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="telemetryEndpoint")
    def telemetry_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        **(String)** The telemetry endpoint URL of the control plane.
        """
        return pulumi.get(self, "telemetry_endpoint")

    @telemetry_endpoint.setter
    def telemetry_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "telemetry_endpoint", value)


class ControlPlane(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Represents a control plane
        ## Example Usage

        ```python
        import pulumi
        import pulumi_konnect as konnect

        example = konnect.ControlPlane("example", description="TestControlPlane")
        ```

        ## Import

        Control planes can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: **(Optional, String)** The description of the control plane.
        :param pulumi.Input[str] name: **(Required, String)** The name of the control plane.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ControlPlaneArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a control plane
        ## Example Usage

        ```python
        import pulumi
        import pulumi_konnect as konnect

        example = konnect.ControlPlane("example", description="TestControlPlane")
        ```

        ## Import

        Control planes can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param ControlPlaneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ControlPlaneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ControlPlaneArgs.__new__(ControlPlaneArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["cluster_type"] = None
            __props__.__dict__["control_plane_endpoint"] = None
            __props__.__dict__["telemetry_endpoint"] = None
        super(ControlPlane, __self__).__init__(
            'konnect:index/controlPlane:ControlPlane',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_type: Optional[pulumi.Input[str]] = None,
            control_plane_endpoint: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            telemetry_endpoint: Optional[pulumi.Input[str]] = None) -> 'ControlPlane':
        """
        Get an existing ControlPlane resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_type: **(String)** The cluster type of the control plane.
        :param pulumi.Input[str] control_plane_endpoint: **(String)** The control plane endpoint URL of the control plane.
        :param pulumi.Input[str] description: **(Optional, String)** The description of the control plane.
        :param pulumi.Input[str] name: **(Required, String)** The name of the control plane.
        :param pulumi.Input[str] telemetry_endpoint: **(String)** The telemetry endpoint URL of the control plane.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ControlPlaneState.__new__(_ControlPlaneState)

        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["control_plane_endpoint"] = control_plane_endpoint
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["telemetry_endpoint"] = telemetry_endpoint
        return ControlPlane(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[str]:
        """
        **(String)** The cluster type of the control plane.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> pulumi.Output[str]:
        """
        **(String)** The control plane endpoint URL of the control plane.
        """
        return pulumi.get(self, "control_plane_endpoint")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** The description of the control plane.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        **(Required, String)** The name of the control plane.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="telemetryEndpoint")
    def telemetry_endpoint(self) -> pulumi.Output[str]:
        """
        **(String)** The telemetry endpoint URL of the control plane.
        """
        return pulumi.get(self, "telemetry_endpoint")

