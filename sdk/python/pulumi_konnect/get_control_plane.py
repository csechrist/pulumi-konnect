# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetControlPlaneResult',
    'AwaitableGetControlPlaneResult',
    'get_control_plane',
    'get_control_plane_output',
]

@pulumi.output_type
class GetControlPlaneResult:
    """
    A collection of values returned by getControlPlane.
    """
    def __init__(__self__, cluster_type=None, control_plane_endpoint=None, description=None, id=None, name=None, search_name=None, telemetry_endpoint=None):
        if cluster_type and not isinstance(cluster_type, str):
            raise TypeError("Expected argument 'cluster_type' to be a str")
        pulumi.set(__self__, "cluster_type", cluster_type)
        if control_plane_endpoint and not isinstance(control_plane_endpoint, str):
            raise TypeError("Expected argument 'control_plane_endpoint' to be a str")
        pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if search_name and not isinstance(search_name, str):
            raise TypeError("Expected argument 'search_name' to be a str")
        pulumi.set(__self__, "search_name", search_name)
        if telemetry_endpoint and not isinstance(telemetry_endpoint, str):
            raise TypeError("Expected argument 'telemetry_endpoint' to be a str")
        pulumi.set(__self__, "telemetry_endpoint", telemetry_endpoint)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        **(String)** The cluster type of the control plane.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> str:
        """
        **(String)** The control plane endpoint URL of the control plane.
        """
        return pulumi.get(self, "control_plane_endpoint")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        **(String)** The description of the control plane.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="searchName")
    def search_name(self) -> Optional[str]:
        return pulumi.get(self, "search_name")

    @property
    @pulumi.getter(name="telemetryEndpoint")
    def telemetry_endpoint(self) -> str:
        """
        **(String)** The telemetry endpoint URL of the control plane.
        """
        return pulumi.get(self, "telemetry_endpoint")


class AwaitableGetControlPlaneResult(GetControlPlaneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetControlPlaneResult(
            cluster_type=self.cluster_type,
            control_plane_endpoint=self.control_plane_endpoint,
            description=self.description,
            id=self.id,
            name=self.name,
            search_name=self.search_name,
            telemetry_endpoint=self.telemetry_endpoint)


def get_control_plane(name: Optional[str] = None,
                      search_name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetControlPlaneResult:
    """
    Represents a control plane
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    example = konnect.get_control_plane(name="TestControlPlane")
    ```


    :param str name: **(Optional, String)** The filter string to apply to the name of the control plane. Uses equality.
    :param str search_name: **(Optional, String)** The search string to apply to the name of the control plane. Uses contains.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['searchName'] = search_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getControlPlane:getControlPlane', __args__, opts=opts, typ=GetControlPlaneResult).value

    return AwaitableGetControlPlaneResult(
        cluster_type=pulumi.get(__ret__, 'cluster_type'),
        control_plane_endpoint=pulumi.get(__ret__, 'control_plane_endpoint'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        search_name=pulumi.get(__ret__, 'search_name'),
        telemetry_endpoint=pulumi.get(__ret__, 'telemetry_endpoint'))


@_utilities.lift_output_func(get_control_plane)
def get_control_plane_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                             search_name: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetControlPlaneResult]:
    """
    Represents a control plane
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    example = konnect.get_control_plane(name="TestControlPlane")
    ```


    :param str name: **(Optional, String)** The filter string to apply to the name of the control plane. Uses equality.
    :param str search_name: **(Optional, String)** The search string to apply to the name of the control plane. Uses contains.
    """
    ...
