# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ConsumerACLArgs', 'ConsumerACL']

@pulumi.input_type
class ConsumerACLArgs:
    def __init__(__self__, *,
                 consumer_id: pulumi.Input[str],
                 control_plane_id: pulumi.Input[str],
                 group: pulumi.Input[str]):
        """
        The set of arguments for constructing a ConsumerACL resource.
        :param pulumi.Input[str] consumer_id: **(Required, String)** The id of the consumer.
        :param pulumi.Input[str] control_plane_id: **(Required, String)** The id of the control plane.
        :param pulumi.Input[str] group: **(Required, String)** The ACL group value.
        """
        pulumi.set(__self__, "consumer_id", consumer_id)
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> pulumi.Input[str]:
        """
        **(Required, String)** The id of the consumer.
        """
        return pulumi.get(self, "consumer_id")

    @consumer_id.setter
    def consumer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumer_id", value)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Input[str]:
        """
        **(Required, String)** The id of the control plane.
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        **(Required, String)** The ACL group value.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)


@pulumi.input_type
class _ConsumerACLState:
    def __init__(__self__, *,
                 acl_id: Optional[pulumi.Input[str]] = None,
                 consumer_id: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConsumerACL resources.
        :param pulumi.Input[str] acl_id: **(String)** Id of the consumer ACL alone
        :param pulumi.Input[str] consumer_id: **(Required, String)** The id of the consumer.
        :param pulumi.Input[str] control_plane_id: **(Required, String)** The id of the control plane.
        :param pulumi.Input[str] group: **(Required, String)** The ACL group value.
        """
        if acl_id is not None:
            pulumi.set(__self__, "acl_id", acl_id)
        if consumer_id is not None:
            pulumi.set(__self__, "consumer_id", consumer_id)
        if control_plane_id is not None:
            pulumi.set(__self__, "control_plane_id", control_plane_id)
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter(name="aclId")
    def acl_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(String)** Id of the consumer ACL alone
        """
        return pulumi.get(self, "acl_id")

    @acl_id.setter
    def acl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_id", value)

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The id of the consumer.
        """
        return pulumi.get(self, "consumer_id")

    @consumer_id.setter
    def consumer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_id", value)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The id of the control plane.
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The ACL group value.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)


class ConsumerACL(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consumer_id: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Represents an ACL credential for a consumer within a control plane
        ## Example Usage

        ```python
        import pulumi
        import pulumi_konnect as konnect

        control_plane = konnect.get_control_plane(name="TestControlPlane")
        consumer = konnect.get_consumer(control_plane_id=control_plane.id,
            search_username="Bob")
        example = konnect.ConsumerACL("example",
            control_plane_id=control_plane.id,
            consumer_id=consumer.consumer_id,
            group="my-acl-group")
        ```

        ## Import

        Consumer ACLs can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] consumer_id: **(Required, String)** The id of the consumer.
        :param pulumi.Input[str] control_plane_id: **(Required, String)** The id of the control plane.
        :param pulumi.Input[str] group: **(Required, String)** The ACL group value.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConsumerACLArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents an ACL credential for a consumer within a control plane
        ## Example Usage

        ```python
        import pulumi
        import pulumi_konnect as konnect

        control_plane = konnect.get_control_plane(name="TestControlPlane")
        consumer = konnect.get_consumer(control_plane_id=control_plane.id,
            search_username="Bob")
        example = konnect.ConsumerACL("example",
            control_plane_id=control_plane.id,
            consumer_id=consumer.consumer_id,
            group="my-acl-group")
        ```

        ## Import

        Consumer ACLs can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param ConsumerACLArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConsumerACLArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consumer_id: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConsumerACLArgs.__new__(ConsumerACLArgs)

            if consumer_id is None and not opts.urn:
                raise TypeError("Missing required property 'consumer_id'")
            __props__.__dict__["consumer_id"] = consumer_id
            if control_plane_id is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane_id'")
            __props__.__dict__["control_plane_id"] = control_plane_id
            if group is None and not opts.urn:
                raise TypeError("Missing required property 'group'")
            __props__.__dict__["group"] = group
            __props__.__dict__["acl_id"] = None
        super(ConsumerACL, __self__).__init__(
            'konnect:index/consumerACL:ConsumerACL',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl_id: Optional[pulumi.Input[str]] = None,
            consumer_id: Optional[pulumi.Input[str]] = None,
            control_plane_id: Optional[pulumi.Input[str]] = None,
            group: Optional[pulumi.Input[str]] = None) -> 'ConsumerACL':
        """
        Get an existing ConsumerACL resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acl_id: **(String)** Id of the consumer ACL alone
        :param pulumi.Input[str] consumer_id: **(Required, String)** The id of the consumer.
        :param pulumi.Input[str] control_plane_id: **(Required, String)** The id of the control plane.
        :param pulumi.Input[str] group: **(Required, String)** The ACL group value.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConsumerACLState.__new__(_ConsumerACLState)

        __props__.__dict__["acl_id"] = acl_id
        __props__.__dict__["consumer_id"] = consumer_id
        __props__.__dict__["control_plane_id"] = control_plane_id
        __props__.__dict__["group"] = group
        return ConsumerACL(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aclId")
    def acl_id(self) -> pulumi.Output[str]:
        """
        **(String)** Id of the consumer ACL alone
        """
        return pulumi.get(self, "acl_id")

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> pulumi.Output[str]:
        """
        **(Required, String)** The id of the consumer.
        """
        return pulumi.get(self, "consumer_id")

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Output[str]:
        """
        **(Required, String)** The id of the control plane.
        """
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output[str]:
        """
        **(Required, String)** The ACL group value.
        """
        return pulumi.get(self, "group")

